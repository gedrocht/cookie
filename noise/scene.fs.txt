#version 330 core

out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec4 ShadowCoord;
in vec2 TexCoords;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 cubeColor;
uniform sampler2D shadowMap;
uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform samplerCube envMap; // Environment map for ambient lighting

float ShadowCalculation(vec4 fragPosLightSpace) {
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;

    // Invert Y-coordinate to correct horizontal flipping
    // projCoords.y = 1.0 - projCoords.y;

    // Check if within shadow map range
    if (projCoords.x < 0.0 || projCoords.x > 1.0 || projCoords.y < 0.0 || projCoords.y > 1.0)
        return 1.0;

    // Sample shadow map
    float closestDepth = texture(shadowMap, projCoords.xy).r;
    float currentDepth = projCoords.z;
    // Bias to avoid shadow acne
    float bias = 0.005;
    // Check whether current fragment is in shadow
    float shadow = currentDepth - bias < closestDepth ? 1.0 : 0.0;
    return shadow;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

void main() {
    vec3 color = cubeColor; // Use the passed color
    vec3 norm = normalize(Normal);

    // Ambient using environment map
    vec3 ambient = 0.5 * color + 0.5 * texture(envMap, reflect(-viewPos, norm)).rgb;

    // Diffuse
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * color;

    // Specular using Cook-Torrance model
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float NDF = pow(max(dot(norm, halfwayDir), 0.0), 32); // Normal Distribution Function
    float G = min(1.0, 2.0 * dot(norm, halfwayDir) * dot(norm, viewDir) / dot(viewDir, halfwayDir)); // Geometry Function
    vec3 F0 = vec3(0.04); // Reflectance at normal incidence
    vec3 F = fresnelSchlick(max(dot(viewDir, halfwayDir), 0.0), F0); // Fresnel
    vec3 specular = NDF * G * F / max(4.0 * dot(norm, viewDir) * dot(norm, lightDir), 0.001); // Cook-Torrance specular

    // Shadow
    float shadow = ShadowCalculation(ShadowCoord);

    // Base color calculation
    vec3 baseColor = ambient + (1.0 - shadow) * (diffuse + specular);
    //vec3 baseColor = ambient + (diffuse + specular);

    vec3 reflectViewDir = reflect(viewDir, norm);
    reflectViewDir = reflectViewDir * 0.5 + 0.5; // Adjust to [0, 1] range
    reflectViewDir = clamp(reflectViewDir, 0.0, 1.0); // Ensure within [0, 1]
    vec3 reflection = texture(reflectionTexture, reflectViewDir.xy).rgb;

    float ratio = 1.00 / 1.52; // Air to glass
    vec3 refractDir = refract(viewDir, norm, ratio);
    refractDir = refractDir * 0.5 + 0.5; // Adjust to [0, 1] range
    refractDir = clamp(refractDir, 0.0, 1.0); // Ensure within [0, 1]
    vec3 refraction = texture(refractionTexture, refractDir.xy).rgb;

    float cosTheta = max(dot(viewDir, norm), 0.0);
    float fresnelFactor = pow(1.0 - cosTheta, 3.0);

    vec3 reflectionRefractionMix = mix(refraction, reflection, fresnelFactor);
    vec3 result = mix(baseColor, reflectionRefractionMix, fresnelFactor);
    
    // Final color with alpha
    float alpha = 1.0; // Adjust if needed

    FragColor = vec4(baseColor, alpha);
}
